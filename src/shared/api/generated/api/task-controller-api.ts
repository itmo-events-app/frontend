/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { TaskRequest } from '../model';
// @ts-ignore
import { TaskResponse } from '../model';
/**
 * TaskControllerApi - axios parameter creator
 * @export
 */
export const TaskControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TaskRequest} taskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskAdd: async (taskRequest: TaskRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskRequest' is not null or undefined
            assertParamExists('taskAdd', 'taskRequest', taskRequest)
            const localVarPath = `/api/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskDelete', 'id', id)
            const localVarPath = `/api/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskDeleteAssignee: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskDeleteAssignee', 'id', id)
            const localVarPath = `/api/tasks/{id}/assignee`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TaskRequest} taskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskEdit: async (id: number, taskRequest: TaskRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskEdit', 'id', id)
            // verify required parameter 'taskRequest' is not null or undefined
            assertParamExists('taskEdit', 'taskRequest', taskRequest)
            const localVarPath = `/api/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskGet', 'id', id)
            const localVarPath = `/api/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} dstEventId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskListCopy: async (dstEventId: number, requestBody: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dstEventId' is not null or undefined
            assertParamExists('taskListCopy', 'dstEventId', dstEventId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('taskListCopy', 'requestBody', requestBody)
            const localVarPath = `/api/tasks/event/{dstEventId}`
                .replace(`{${"dstEventId"}}`, encodeURIComponent(String(dstEventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} dstEventId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskListMove: async (dstEventId: number, requestBody: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dstEventId' is not null or undefined
            assertParamExists('taskListMove', 'dstEventId', dstEventId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('taskListMove', 'requestBody', requestBody)
            const localVarPath = `/api/tasks/event/{dstEventId}`
                .replace(`{${"dstEventId"}}`, encodeURIComponent(String(dstEventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {number} [assigneeId] 
         * @param {number} [assignerId] 
         * @param {TaskListShowInEventTaskStatusEnum} [taskStatus] 
         * @param {string} [deadlineLowerLimit] 
         * @param {string} [deadlineUpperLimit] 
         * @param {boolean} [subEventTasksGet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskListShowInEvent: async (eventId: number, assigneeId?: number, assignerId?: number, taskStatus?: TaskListShowInEventTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, subEventTasksGet?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('taskListShowInEvent', 'eventId', eventId)
            const localVarPath = `/api/tasks/event/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assigneeId !== undefined) {
                localVarQueryParameter['assigneeId'] = assigneeId;
            }

            if (assignerId !== undefined) {
                localVarQueryParameter['assignerId'] = assignerId;
            }

            if (taskStatus !== undefined) {
                localVarQueryParameter['taskStatus'] = taskStatus;
            }

            if (deadlineLowerLimit !== undefined) {
                localVarQueryParameter['deadlineLowerLimit'] = (deadlineLowerLimit as any instanceof Date) ?
                    (deadlineLowerLimit as any).toISOString() :
                    deadlineLowerLimit;
            }

            if (deadlineUpperLimit !== undefined) {
                localVarQueryParameter['deadlineUpperLimit'] = (deadlineUpperLimit as any instanceof Date) ?
                    (deadlineUpperLimit as any).toISOString() :
                    deadlineUpperLimit;
            }

            if (subEventTasksGet !== undefined) {
                localVarQueryParameter['subEventTasksGet'] = subEventTasksGet;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {number} [assignerId] 
         * @param {TaskListShowInEventWhereAssigneeTaskStatusEnum} [taskStatus] 
         * @param {string} [deadlineLowerLimit] 
         * @param {string} [deadlineUpperLimit] 
         * @param {boolean} [subEventTasksGet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskListShowInEventWhereAssignee: async (eventId: number, assignerId?: number, taskStatus?: TaskListShowInEventWhereAssigneeTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, subEventTasksGet?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('taskListShowInEventWhereAssignee', 'eventId', eventId)
            const localVarPath = `/api/tasks/event/{eventId}/where-assignee`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assignerId !== undefined) {
                localVarQueryParameter['assignerId'] = assignerId;
            }

            if (taskStatus !== undefined) {
                localVarQueryParameter['taskStatus'] = taskStatus;
            }

            if (deadlineLowerLimit !== undefined) {
                localVarQueryParameter['deadlineLowerLimit'] = (deadlineLowerLimit as any instanceof Date) ?
                    (deadlineLowerLimit as any).toISOString() :
                    deadlineLowerLimit;
            }

            if (deadlineUpperLimit !== undefined) {
                localVarQueryParameter['deadlineUpperLimit'] = (deadlineUpperLimit as any instanceof Date) ?
                    (deadlineUpperLimit as any).toISOString() :
                    deadlineUpperLimit;
            }

            if (subEventTasksGet !== undefined) {
                localVarQueryParameter['subEventTasksGet'] = subEventTasksGet;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [eventId] 
         * @param {number} [assignerId] 
         * @param {TaskListShowWhereAssigneeTaskStatusEnum} [taskStatus] 
         * @param {string} [deadlineLowerLimit] 
         * @param {string} [deadlineUpperLimit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskListShowWhereAssignee: async (eventId?: number, assignerId?: number, taskStatus?: TaskListShowWhereAssigneeTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/where-assignee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eventId !== undefined) {
                localVarQueryParameter['eventId'] = eventId;
            }

            if (assignerId !== undefined) {
                localVarQueryParameter['assignerId'] = assignerId;
            }

            if (taskStatus !== undefined) {
                localVarQueryParameter['taskStatus'] = taskStatus;
            }

            if (deadlineLowerLimit !== undefined) {
                localVarQueryParameter['deadlineLowerLimit'] = (deadlineLowerLimit as any instanceof Date) ?
                    (deadlineLowerLimit as any).toISOString() :
                    deadlineLowerLimit;
            }

            if (deadlineUpperLimit !== undefined) {
                localVarQueryParameter['deadlineUpperLimit'] = (deadlineUpperLimit as any instanceof Date) ?
                    (deadlineUpperLimit as any).toISOString() :
                    deadlineUpperLimit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskSetAssignee: async (id: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskSetAssignee', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('taskSetAssignee', 'userId', userId)
            const localVarPath = `/api/tasks/{id}/assignee/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskSetStatus: async (id: number, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskSetStatus', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('taskSetStatus', 'body', body)
            const localVarPath = `/api/tasks/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskTakeOn: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskTakeOn', 'id', id)
            const localVarPath = `/api/tasks/{id}/assignee`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskControllerApi - functional programming interface
 * @export
 */
export const TaskControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TaskRequest} taskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskAdd(taskRequest: TaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskAdd(taskRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskAdd']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskDeleteAssignee(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskDeleteAssignee(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskDeleteAssignee']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TaskRequest} taskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskEdit(id: number, taskRequest: TaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskEdit(id, taskRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskEdit']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} dstEventId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskListCopy(dstEventId: number, requestBody: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskListCopy(dstEventId, requestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskListCopy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} dstEventId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskListMove(dstEventId: number, requestBody: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskListMove(dstEventId, requestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskListMove']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {number} [assigneeId] 
         * @param {number} [assignerId] 
         * @param {TaskListShowInEventTaskStatusEnum} [taskStatus] 
         * @param {string} [deadlineLowerLimit] 
         * @param {string} [deadlineUpperLimit] 
         * @param {boolean} [subEventTasksGet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskListShowInEvent(eventId: number, assigneeId?: number, assignerId?: number, taskStatus?: TaskListShowInEventTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, subEventTasksGet?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskListShowInEvent(eventId, assigneeId, assignerId, taskStatus, deadlineLowerLimit, deadlineUpperLimit, subEventTasksGet, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskListShowInEvent']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {number} [assignerId] 
         * @param {TaskListShowInEventWhereAssigneeTaskStatusEnum} [taskStatus] 
         * @param {string} [deadlineLowerLimit] 
         * @param {string} [deadlineUpperLimit] 
         * @param {boolean} [subEventTasksGet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskListShowInEventWhereAssignee(eventId: number, assignerId?: number, taskStatus?: TaskListShowInEventWhereAssigneeTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, subEventTasksGet?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskListShowInEventWhereAssignee(eventId, assignerId, taskStatus, deadlineLowerLimit, deadlineUpperLimit, subEventTasksGet, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskListShowInEventWhereAssignee']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [eventId] 
         * @param {number} [assignerId] 
         * @param {TaskListShowWhereAssigneeTaskStatusEnum} [taskStatus] 
         * @param {string} [deadlineLowerLimit] 
         * @param {string} [deadlineUpperLimit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskListShowWhereAssignee(eventId?: number, assignerId?: number, taskStatus?: TaskListShowWhereAssigneeTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskListShowWhereAssignee(eventId, assignerId, taskStatus, deadlineLowerLimit, deadlineUpperLimit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskListShowWhereAssignee']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskSetAssignee(id: number, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskSetAssignee(id, userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskSetAssignee']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskSetStatus(id: number, body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskSetStatus(id, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskSetStatus']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskTakeOn(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskTakeOn(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskControllerApi.taskTakeOn']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TaskControllerApi - factory interface
 * @export
 */
export const TaskControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {TaskRequest} taskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskAdd(taskRequest: TaskRequest, options?: any): AxiosPromise<number> {
            return localVarFp.taskAdd(taskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskDelete(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.taskDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskDeleteAssignee(id: number, options?: any): AxiosPromise<TaskResponse> {
            return localVarFp.taskDeleteAssignee(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TaskRequest} taskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskEdit(id: number, taskRequest: TaskRequest, options?: any): AxiosPromise<TaskResponse> {
            return localVarFp.taskEdit(id, taskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskGet(id: number, options?: any): AxiosPromise<TaskResponse> {
            return localVarFp.taskGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} dstEventId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskListCopy(dstEventId: number, requestBody: Array<number>, options?: any): AxiosPromise<Array<TaskResponse>> {
            return localVarFp.taskListCopy(dstEventId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} dstEventId 
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskListMove(dstEventId: number, requestBody: Array<number>, options?: any): AxiosPromise<Array<TaskResponse>> {
            return localVarFp.taskListMove(dstEventId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} eventId 
         * @param {number} [assigneeId] 
         * @param {number} [assignerId] 
         * @param {TaskListShowInEventTaskStatusEnum} [taskStatus] 
         * @param {string} [deadlineLowerLimit] 
         * @param {string} [deadlineUpperLimit] 
         * @param {boolean} [subEventTasksGet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskListShowInEvent(eventId: number, assigneeId?: number, assignerId?: number, taskStatus?: TaskListShowInEventTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, subEventTasksGet?: boolean, options?: any): AxiosPromise<Array<TaskResponse>> {
            return localVarFp.taskListShowInEvent(eventId, assigneeId, assignerId, taskStatus, deadlineLowerLimit, deadlineUpperLimit, subEventTasksGet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} eventId 
         * @param {number} [assignerId] 
         * @param {TaskListShowInEventWhereAssigneeTaskStatusEnum} [taskStatus] 
         * @param {string} [deadlineLowerLimit] 
         * @param {string} [deadlineUpperLimit] 
         * @param {boolean} [subEventTasksGet] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskListShowInEventWhereAssignee(eventId: number, assignerId?: number, taskStatus?: TaskListShowInEventWhereAssigneeTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, subEventTasksGet?: boolean, options?: any): AxiosPromise<Array<TaskResponse>> {
            return localVarFp.taskListShowInEventWhereAssignee(eventId, assignerId, taskStatus, deadlineLowerLimit, deadlineUpperLimit, subEventTasksGet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [eventId] 
         * @param {number} [assignerId] 
         * @param {TaskListShowWhereAssigneeTaskStatusEnum} [taskStatus] 
         * @param {string} [deadlineLowerLimit] 
         * @param {string} [deadlineUpperLimit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskListShowWhereAssignee(eventId?: number, assignerId?: number, taskStatus?: TaskListShowWhereAssigneeTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, options?: any): AxiosPromise<Array<TaskResponse>> {
            return localVarFp.taskListShowWhereAssignee(eventId, assignerId, taskStatus, deadlineLowerLimit, deadlineUpperLimit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskSetAssignee(id: number, userId: number, options?: any): AxiosPromise<TaskResponse> {
            return localVarFp.taskSetAssignee(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskSetStatus(id: number, body: string, options?: any): AxiosPromise<TaskResponse> {
            return localVarFp.taskSetStatus(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskTakeOn(id: number, options?: any): AxiosPromise<TaskResponse> {
            return localVarFp.taskTakeOn(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskControllerApi - object-oriented interface
 * @export
 * @class TaskControllerApi
 * @extends {BaseAPI}
 */
export class TaskControllerApi extends BaseAPI {
    /**
     * 
     * @param {TaskRequest} taskRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskAdd(taskRequest: TaskRequest, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskAdd(taskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskDelete(id: number, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskDeleteAssignee(id: number, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskDeleteAssignee(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TaskRequest} taskRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskEdit(id: number, taskRequest: TaskRequest, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskEdit(id, taskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskGet(id: number, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} dstEventId 
     * @param {Array<number>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskListCopy(dstEventId: number, requestBody: Array<number>, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskListCopy(dstEventId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} dstEventId 
     * @param {Array<number>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskListMove(dstEventId: number, requestBody: Array<number>, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskListMove(dstEventId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} eventId 
     * @param {number} [assigneeId] 
     * @param {number} [assignerId] 
     * @param {TaskListShowInEventTaskStatusEnum} [taskStatus] 
     * @param {string} [deadlineLowerLimit] 
     * @param {string} [deadlineUpperLimit] 
     * @param {boolean} [subEventTasksGet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskListShowInEvent(eventId: number, assigneeId?: number, assignerId?: number, taskStatus?: TaskListShowInEventTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, subEventTasksGet?: boolean, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskListShowInEvent(eventId, assigneeId, assignerId, taskStatus, deadlineLowerLimit, deadlineUpperLimit, subEventTasksGet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} eventId 
     * @param {number} [assignerId] 
     * @param {TaskListShowInEventWhereAssigneeTaskStatusEnum} [taskStatus] 
     * @param {string} [deadlineLowerLimit] 
     * @param {string} [deadlineUpperLimit] 
     * @param {boolean} [subEventTasksGet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskListShowInEventWhereAssignee(eventId: number, assignerId?: number, taskStatus?: TaskListShowInEventWhereAssigneeTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, subEventTasksGet?: boolean, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskListShowInEventWhereAssignee(eventId, assignerId, taskStatus, deadlineLowerLimit, deadlineUpperLimit, subEventTasksGet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [eventId] 
     * @param {number} [assignerId] 
     * @param {TaskListShowWhereAssigneeTaskStatusEnum} [taskStatus] 
     * @param {string} [deadlineLowerLimit] 
     * @param {string} [deadlineUpperLimit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskListShowWhereAssignee(eventId?: number, assignerId?: number, taskStatus?: TaskListShowWhereAssigneeTaskStatusEnum, deadlineLowerLimit?: string, deadlineUpperLimit?: string, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskListShowWhereAssignee(eventId, assignerId, taskStatus, deadlineLowerLimit, deadlineUpperLimit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskSetAssignee(id: number, userId: number, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskSetAssignee(id, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskSetStatus(id: number, body: string, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskSetStatus(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public taskTakeOn(id: number, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).taskTakeOn(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TaskListShowInEventTaskStatusEnum = {
    New: 'NEW',
    InProgress: 'IN_PROGRESS',
    Expired: 'EXPIRED',
    Done: 'DONE'
} as const;
export type TaskListShowInEventTaskStatusEnum = typeof TaskListShowInEventTaskStatusEnum[keyof typeof TaskListShowInEventTaskStatusEnum];
/**
 * @export
 */
export const TaskListShowInEventWhereAssigneeTaskStatusEnum = {
    New: 'NEW',
    InProgress: 'IN_PROGRESS',
    Expired: 'EXPIRED',
    Done: 'DONE'
} as const;
export type TaskListShowInEventWhereAssigneeTaskStatusEnum = typeof TaskListShowInEventWhereAssigneeTaskStatusEnum[keyof typeof TaskListShowInEventWhereAssigneeTaskStatusEnum];
/**
 * @export
 */
export const TaskListShowWhereAssigneeTaskStatusEnum = {
    New: 'NEW',
    InProgress: 'IN_PROGRESS',
    Expired: 'EXPIRED',
    Done: 'DONE'
} as const;
export type TaskListShowWhereAssigneeTaskStatusEnum = typeof TaskListShowWhereAssigneeTaskStatusEnum[keyof typeof TaskListShowWhereAssigneeTaskStatusEnum];
