/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * TestControllerApi - axios parameter creator
 * @export
 */
export const TestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} bucket 
         * @param {string} object 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (bucket: string, object: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucket' is not null or undefined
            assertParamExists('_delete', 'bucket', bucket)
            // verify required parameter 'object' is not null or undefined
            assertParamExists('_delete', 'object', object)
            const localVarPath = `/delete/{bucket}/{object}`
                .replace(`{${"bucket"}}`, encodeURIComponent(String(bucket)))
                .replace(`{${"object"}}`, encodeURIComponent(String(object)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} s 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sayHello: async (s: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 's' is not null or undefined
            assertParamExists('sayHello', 's', s)
            const localVarPath = `/hello`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bucket 
         * @param {File} multipartFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload: async (bucket: string, multipartFile: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bucket' is not null or undefined
            assertParamExists('upload', 'bucket', bucket)
            // verify required parameter 'multipartFile' is not null or undefined
            assertParamExists('upload', 'multipartFile', multipartFile)
            const localVarPath = `/upload/{bucket}`
                .replace(`{${"bucket"}}`, encodeURIComponent(String(bucket)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (multipartFile !== undefined) { 
                localVarFormParams.append('multipartFile', multipartFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestControllerApi - functional programming interface
 * @export
 */
export const TestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} bucket 
         * @param {string} object 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(bucket: string, object: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(bucket, object, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TestControllerApi._delete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} s 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sayHello(s: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sayHello(s, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TestControllerApi.sayHello']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} bucket 
         * @param {File} multipartFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upload(bucket: string, multipartFile: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upload(bucket, multipartFile, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TestControllerApi.upload']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TestControllerApi - factory interface
 * @export
 */
export const TestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} bucket 
         * @param {string} object 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(bucket: string, object: string, options?: any): AxiosPromise<void> {
            return localVarFp._delete(bucket, object, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} s 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sayHello(s: string, options?: any): AxiosPromise<string> {
            return localVarFp.sayHello(s, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bucket 
         * @param {File} multipartFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(bucket: string, multipartFile: File, options?: any): AxiosPromise<void> {
            return localVarFp.upload(bucket, multipartFile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestControllerApi - object-oriented interface
 * @export
 * @class TestControllerApi
 * @extends {BaseAPI}
 */
export class TestControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} bucket 
     * @param {string} object 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestControllerApi
     */
    public _delete(bucket: string, object: string, options?: AxiosRequestConfig) {
        return TestControllerApiFp(this.configuration)._delete(bucket, object, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} s 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestControllerApi
     */
    public sayHello(s: string, options?: AxiosRequestConfig) {
        return TestControllerApiFp(this.configuration).sayHello(s, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bucket 
     * @param {File} multipartFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestControllerApi
     */
    public upload(bucket: string, multipartFile: File, options?: AxiosRequestConfig) {
        return TestControllerApiFp(this.configuration).upload(bucket, multipartFile, options).then((request) => request(this.axios, this.basePath));
    }
}

