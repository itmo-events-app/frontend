/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { PlaceRequest } from '../model';
// @ts-ignore
import { PlaceResponse } from '../model';
/**
 * PlaceControllerApi - axios parameter creator
 * @export
 */
export const PlaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Фильтрация списка площадок
         * @param {number} [page] Номер страницы, с которой начать показ площадок
         * @param {number} [size] Число площадок на странице
         * @param {string} [name] Имя площадки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrFilteredPlaces: async (page?: number, size?: number, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/places`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создание площадки
         * @param {PlaceRequest} placeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeAdd: async (placeRequest: PlaceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeRequest' is not null or undefined
            assertParamExists('placeAdd', 'placeRequest', placeRequest)
            const localVarPath = `/api/places`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(placeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаление площадки
         * @param {number} id ID площадки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('placeDelete', 'id', id)
            const localVarPath = `/api/places/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Редактирование площадки
         * @param {number} id ID площадки
         * @param {PlaceRequest} placeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeEdit: async (id: number, placeRequest: PlaceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('placeEdit', 'id', id)
            // verify required parameter 'placeRequest' is not null or undefined
            assertParamExists('placeEdit', 'placeRequest', placeRequest)
            const localVarPath = `/api/places/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(placeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение площадки по id
         * @param {number} id ID площадки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('placeGet', 'id', id)
            const localVarPath = `/api/places/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuthentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaceControllerApi - functional programming interface
 * @export
 */
export const PlaceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlaceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Фильтрация списка площадок
         * @param {number} [page] Номер страницы, с которой начать показ площадок
         * @param {number} [size] Число площадок на странице
         * @param {string} [name] Имя площадки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrFilteredPlaces(page?: number, size?: number, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlaceResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrFilteredPlaces(page, size, name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaceControllerApi.getAllOrFilteredPlaces']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Создание площадки
         * @param {PlaceRequest} placeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placeAdd(placeRequest: PlaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placeAdd(placeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaceControllerApi.placeAdd']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Удаление площадки
         * @param {number} id ID площадки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placeDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placeDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaceControllerApi.placeDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Редактирование площадки
         * @param {number} id ID площадки
         * @param {PlaceRequest} placeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placeEdit(id: number, placeRequest: PlaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placeEdit(id, placeRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaceControllerApi.placeEdit']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Получение площадки по id
         * @param {number} id ID площадки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placeGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placeGet(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaceControllerApi.placeGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PlaceControllerApi - factory interface
 * @export
 */
export const PlaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlaceControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Фильтрация списка площадок
         * @param {number} [page] Номер страницы, с которой начать показ площадок
         * @param {number} [size] Число площадок на странице
         * @param {string} [name] Имя площадки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrFilteredPlaces(page?: number, size?: number, name?: string, options?: any): AxiosPromise<Array<PlaceResponse>> {
            return localVarFp.getAllOrFilteredPlaces(page, size, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создание площадки
         * @param {PlaceRequest} placeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeAdd(placeRequest: PlaceRequest, options?: any): AxiosPromise<number> {
            return localVarFp.placeAdd(placeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаление площадки
         * @param {number} id ID площадки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.placeDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Редактирование площадки
         * @param {number} id ID площадки
         * @param {PlaceRequest} placeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeEdit(id: number, placeRequest: PlaceRequest, options?: any): AxiosPromise<PlaceResponse> {
            return localVarFp.placeEdit(id, placeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение площадки по id
         * @param {number} id ID площадки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeGet(id: number, options?: any): AxiosPromise<PlaceResponse> {
            return localVarFp.placeGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaceControllerApi - object-oriented interface
 * @export
 * @class PlaceControllerApi
 * @extends {BaseAPI}
 */
export class PlaceControllerApi extends BaseAPI {
    /**
     * 
     * @summary Фильтрация списка площадок
     * @param {number} [page] Номер страницы, с которой начать показ площадок
     * @param {number} [size] Число площадок на странице
     * @param {string} [name] Имя площадки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public getAllOrFilteredPlaces(page?: number, size?: number, name?: string, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).getAllOrFilteredPlaces(page, size, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создание площадки
     * @param {PlaceRequest} placeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public placeAdd(placeRequest: PlaceRequest, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).placeAdd(placeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаление площадки
     * @param {number} id ID площадки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public placeDelete(id: number, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).placeDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Редактирование площадки
     * @param {number} id ID площадки
     * @param {PlaceRequest} placeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public placeEdit(id: number, placeRequest: PlaceRequest, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).placeEdit(id, placeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение площадки по id
     * @param {number} id ID площадки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaceControllerApi
     */
    public placeGet(id: number, options?: AxiosRequestConfig) {
        return PlaceControllerApiFp(this.configuration).placeGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}

