/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ParticipantResponse } from '../model';
// @ts-ignore
import { ParticipantsListRequest } from '../model';
// @ts-ignore
import { ParticipantsListResponse } from '../model';
/**
 * ParticipantsControllerApi - axios parameter creator
 * @export
 */
export const ParticipantsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Изменение статуса присутствия участника на данном мероприятии
         * @param {number} id ID мероприятия
         * @param {number} idParticipant ID участника мероприятия
         * @param {boolean} isVisited Статус посещения участником мероприятия (да/нет)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePresence: async (id: number, idParticipant: number, isVisited: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('changePresence', 'id', id)
            // verify required parameter 'idParticipant' is not null or undefined
            assertParamExists('changePresence', 'idParticipant', idParticipant)
            // verify required parameter 'isVisited' is not null or undefined
            assertParamExists('changePresence', 'isVisited', isVisited)
            const localVarPath = `/api/events/{id}/participants`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idParticipant !== undefined) {
                localVarQueryParameter['idParticipant'] = idParticipant;
            }

            if (isVisited !== undefined) {
                localVarQueryParameter['isVisited'] = isVisited;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение списка участников данного мероприятия
         * @param {number} id ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantsList: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getParticipantsList', 'id', id)
            const localVarPath = `/api/events/{id}/participants/list`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Экспорт списка участников данного мероприятия в формате xlsx
         * @param {number} id ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantsXlsxFile: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getParticipantsXlsxFile', 'id', id)
            const localVarPath = `/api/events/{id}/participants/list/xlsx`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Импорт нового списка участников данного мероприятия
         * @param {number} id ID мероприятия
         * @param {ParticipantsListRequest} [participantsListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setParticipantsList: async (id: number, participantsListRequest?: ParticipantsListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setParticipantsList', 'id', id)
            const localVarPath = `/api/events/{id}/participants/newlist`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(participantsListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParticipantsControllerApi - functional programming interface
 * @export
 */
export const ParticipantsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ParticipantsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Изменение статуса присутствия участника на данном мероприятии
         * @param {number} id ID мероприятия
         * @param {number} idParticipant ID участника мероприятия
         * @param {boolean} isVisited Статус посещения участником мероприятия (да/нет)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePresence(id: number, idParticipant: number, isVisited: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParticipantResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePresence(id, idParticipant, isVisited, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ParticipantsControllerApi.changePresence']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Получение списка участников данного мероприятия
         * @param {number} id ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParticipantsList(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParticipantsListResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipantsList(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ParticipantsControllerApi.getParticipantsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Экспорт списка участников данного мероприятия в формате xlsx
         * @param {number} id ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParticipantsXlsxFile(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParticipantsListResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipantsXlsxFile(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ParticipantsControllerApi.getParticipantsXlsxFile']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Импорт нового списка участников данного мероприятия
         * @param {number} id ID мероприятия
         * @param {ParticipantsListRequest} [participantsListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setParticipantsList(id: number, participantsListRequest?: ParticipantsListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParticipantsListResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setParticipantsList(id, participantsListRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ParticipantsControllerApi.setParticipantsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ParticipantsControllerApi - factory interface
 * @export
 */
export const ParticipantsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ParticipantsControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Изменение статуса присутствия участника на данном мероприятии
         * @param {number} id ID мероприятия
         * @param {number} idParticipant ID участника мероприятия
         * @param {boolean} isVisited Статус посещения участником мероприятия (да/нет)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePresence(id: number, idParticipant: number, isVisited: boolean, options?: any): AxiosPromise<Array<ParticipantResponse>> {
            return localVarFp.changePresence(id, idParticipant, isVisited, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение списка участников данного мероприятия
         * @param {number} id ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantsList(id: number, options?: any): AxiosPromise<Array<ParticipantsListResponse>> {
            return localVarFp.getParticipantsList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Экспорт списка участников данного мероприятия в формате xlsx
         * @param {number} id ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantsXlsxFile(id: number, options?: any): AxiosPromise<Array<ParticipantsListResponse>> {
            return localVarFp.getParticipantsXlsxFile(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Импорт нового списка участников данного мероприятия
         * @param {number} id ID мероприятия
         * @param {ParticipantsListRequest} [participantsListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setParticipantsList(id: number, participantsListRequest?: ParticipantsListRequest, options?: any): AxiosPromise<Array<ParticipantsListResponse>> {
            return localVarFp.setParticipantsList(id, participantsListRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParticipantsControllerApi - object-oriented interface
 * @export
 * @class ParticipantsControllerApi
 * @extends {BaseAPI}
 */
export class ParticipantsControllerApi extends BaseAPI {
    /**
     * 
     * @summary Изменение статуса присутствия участника на данном мероприятии
     * @param {number} id ID мероприятия
     * @param {number} idParticipant ID участника мероприятия
     * @param {boolean} isVisited Статус посещения участником мероприятия (да/нет)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsControllerApi
     */
    public changePresence(id: number, idParticipant: number, isVisited: boolean, options?: AxiosRequestConfig) {
        return ParticipantsControllerApiFp(this.configuration).changePresence(id, idParticipant, isVisited, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение списка участников данного мероприятия
     * @param {number} id ID мероприятия
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsControllerApi
     */
    public getParticipantsList(id: number, options?: AxiosRequestConfig) {
        return ParticipantsControllerApiFp(this.configuration).getParticipantsList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Экспорт списка участников данного мероприятия в формате xlsx
     * @param {number} id ID мероприятия
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsControllerApi
     */
    public getParticipantsXlsxFile(id: number, options?: AxiosRequestConfig) {
        return ParticipantsControllerApiFp(this.configuration).getParticipantsXlsxFile(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Импорт нового списка участников данного мероприятия
     * @param {number} id ID мероприятия
     * @param {ParticipantsListRequest} [participantsListRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsControllerApi
     */
    public setParticipantsList(id: number, participantsListRequest?: ParticipantsListRequest, options?: AxiosRequestConfig) {
        return ParticipantsControllerApiFp(this.configuration).setParticipantsList(id, participantsListRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

