/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { EventResponse } from '../model';
// @ts-ignore
import { PrivilegeResponse } from '../model';
// @ts-ignore
import { RoleRequest } from '../model';
// @ts-ignore
import { RoleResponse } from '../model';
/**
 * RoleControllerApi - axios parameter creator
 * @export
 */
export const RoleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Назначение пользователю роли Помощник
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAssistantRole: async (userId: number, eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('assignAssistantRole', 'userId', userId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('assignAssistantRole', 'eventId', eventId)
            const localVarPath = `/api/roles/assistant/{userId}/{eventId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Назначение пользователю организационной роли
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {number} roleId ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOrganizationalRole: async (userId: number, eventId: number, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('assignOrganizationalRole', 'userId', userId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('assignOrganizationalRole', 'eventId', eventId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('assignOrganizationalRole', 'roleId', roleId)
            const localVarPath = `/api/roles/organizational/{userId}/{eventId}/{roleId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Назначение пользователю роли Организатор
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOrganizerRole: async (userId: number, eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('assignOrganizerRole', 'userId', userId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('assignOrganizerRole', 'eventId', eventId)
            const localVarPath = `/api/roles/organizer/{userId}/{eventId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Назначение пользователю системной роли
         * @param {number} userId ID пользователя
         * @param {number} roleId ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSystemRole: async (userId: number, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('assignSystemRole', 'userId', userId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('assignSystemRole', 'roleId', roleId)
            const localVarPath = `/api/roles/system/{userId}/{roleId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создание роли
         * @param {RoleRequest} roleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (roleRequest: RoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleRequest' is not null or undefined
            assertParamExists('createRole', 'roleRequest', roleRequest)
            const localVarPath = `/api/roles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаление роли
         * @param {number} id ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRole', 'id', id)
            const localVarPath = `/api/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Редактирование роли
         * @param {number} id ID роли
         * @param {RoleRequest} roleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRole: async (id: number, roleRequest: RoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('editRole', 'id', id)
            // verify required parameter 'roleRequest' is not null or undefined
            assertParamExists('editRole', 'roleRequest', roleRequest)
            const localVarPath = `/api/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение списка привилегий
         * @param {GetAllPrivilegesTypeEnum} [type] Тип привилегии
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPrivileges: async (type?: GetAllPrivilegesTypeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/roles/privileges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение списка всех ролей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/roles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение списка мероприятий пользователя по роли
         * @param {number} id ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsByRole: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEventsByRole', 'id', id)
            const localVarPath = `/api/roles/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение организационной роли по id
         * @param {number} roleId ID роли
         * @param {number} eventId ID меропрятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationalRoleById: async (roleId: number, eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getOrganizationalRoleById', 'roleId', roleId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getOrganizationalRoleById', 'eventId', eventId)
            const localVarPath = `/api/roles/organizational/{roleId}`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (eventId !== undefined) {
                localVarQueryParameter['eventId'] = eventId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение списка организационных ролей
         * @param {number} eventId ID меропрятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationalRoles: async (eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getOrganizationalRoles', 'eventId', eventId)
            const localVarPath = `/api/roles/organizational`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (eventId !== undefined) {
                localVarQueryParameter['eventId'] = eventId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение роли по id
         * @param {number} id ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoleById', 'id', id)
            const localVarPath = `/api/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение списка системных ролей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/roles/system`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Лишение пользователя роли Помощник
         * @param {number} userId 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAssistantRole: async (userId: number, eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('revokeAssistantRole', 'userId', userId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('revokeAssistantRole', 'eventId', eventId)
            const localVarPath = `/api/roles/assistant/{userId}/{eventId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Лишение пользователя организационной роли
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {number} roleId ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOrganizationalRole: async (userId: number, eventId: number, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('revokeOrganizationalRole', 'userId', userId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('revokeOrganizationalRole', 'eventId', eventId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('revokeOrganizationalRole', 'roleId', roleId)
            const localVarPath = `/api/roles/organizational/{userId}/{eventId}/{roleId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Лишение пользователя роли Организатор
         * @param {number} userId 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOrganizerRole: async (userId: number, eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('revokeOrganizerRole', 'userId', userId)
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('revokeOrganizerRole', 'eventId', eventId)
            const localVarPath = `/api/roles/organizer/{userId}/{eventId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Лишение пользователя системной роли
         * @param {number} userId ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeSystemRole: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('revokeSystemRole', 'userId', userId)
            const localVarPath = `/api/roles/system-revoke/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Поиск ролей по совпадению в названии
         * @param {string} name Имя роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByName: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('searchByName', 'name', name)
            const localVarPath = `/api/roles/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer Authentication required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleControllerApi - functional programming interface
 * @export
 */
export const RoleControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Назначение пользователю роли Помощник
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignAssistantRole(userId: number, eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignAssistantRole(userId, eventId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.assignAssistantRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Назначение пользователю организационной роли
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {number} roleId ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignOrganizationalRole(userId: number, eventId: number, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignOrganizationalRole(userId, eventId, roleId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.assignOrganizationalRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Назначение пользователю роли Организатор
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignOrganizerRole(userId: number, eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignOrganizerRole(userId, eventId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.assignOrganizerRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Назначение пользователю системной роли
         * @param {number} userId ID пользователя
         * @param {number} roleId ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignSystemRole(userId: number, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignSystemRole(userId, roleId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.assignSystemRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Создание роли
         * @param {RoleRequest} roleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(roleRequest: RoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(roleRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.createRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Удаление роли
         * @param {number} id ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.deleteRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Редактирование роли
         * @param {number} id ID роли
         * @param {RoleRequest} roleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editRole(id: number, roleRequest: RoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editRole(id, roleRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.editRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Получение списка привилегий
         * @param {GetAllPrivilegesTypeEnum} [type] Тип привилегии
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPrivileges(type?: GetAllPrivilegesTypeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrivilegeResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPrivileges(type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.getAllPrivileges']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Получение списка всех ролей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRoles(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.getAllRoles']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Получение списка мероприятий пользователя по роли
         * @param {number} id ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsByRole(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsByRole(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.getEventsByRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Получение организационной роли по id
         * @param {number} roleId ID роли
         * @param {number} eventId ID меропрятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationalRoleById(roleId: number, eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationalRoleById(roleId, eventId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.getOrganizationalRoleById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Получение списка организационных ролей
         * @param {number} eventId ID меропрятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationalRoles(eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationalRoles(eventId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.getOrganizationalRoles']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Получение роли по id
         * @param {number} id ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleById(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.getRoleById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Получение списка системных ролей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemRoles(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.getSystemRoles']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Лишение пользователя роли Помощник
         * @param {number} userId 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeAssistantRole(userId: number, eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeAssistantRole(userId, eventId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.revokeAssistantRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Лишение пользователя организационной роли
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {number} roleId ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeOrganizationalRole(userId: number, eventId: number, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeOrganizationalRole(userId, eventId, roleId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.revokeOrganizationalRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Лишение пользователя роли Организатор
         * @param {number} userId 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeOrganizerRole(userId: number, eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeOrganizerRole(userId, eventId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.revokeOrganizerRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Лишение пользователя системной роли
         * @param {number} userId ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeSystemRole(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeSystemRole(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.revokeSystemRole']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Поиск ролей по совпадению в названии
         * @param {string} name Имя роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByName(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByName(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['RoleControllerApi.searchByName']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * RoleControllerApi - factory interface
 * @export
 */
export const RoleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Назначение пользователю роли Помощник
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAssistantRole(userId: number, eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.assignAssistantRole(userId, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Назначение пользователю организационной роли
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {number} roleId ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOrganizationalRole(userId: number, eventId: number, roleId: number, options?: any): AxiosPromise<void> {
            return localVarFp.assignOrganizationalRole(userId, eventId, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Назначение пользователю роли Организатор
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOrganizerRole(userId: number, eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.assignOrganizerRole(userId, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Назначение пользователю системной роли
         * @param {number} userId ID пользователя
         * @param {number} roleId ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSystemRole(userId: number, roleId: number, options?: any): AxiosPromise<void> {
            return localVarFp.assignSystemRole(userId, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создание роли
         * @param {RoleRequest} roleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(roleRequest: RoleRequest, options?: any): AxiosPromise<RoleResponse> {
            return localVarFp.createRole(roleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаление роли
         * @param {number} id ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRole(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Редактирование роли
         * @param {number} id ID роли
         * @param {RoleRequest} roleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRole(id: number, roleRequest: RoleRequest, options?: any): AxiosPromise<RoleResponse> {
            return localVarFp.editRole(id, roleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение списка привилегий
         * @param {GetAllPrivilegesTypeEnum} [type] Тип привилегии
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPrivileges(type?: GetAllPrivilegesTypeEnum, options?: any): AxiosPromise<Array<PrivilegeResponse>> {
            return localVarFp.getAllPrivileges(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение списка всех ролей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoles(options?: any): AxiosPromise<Array<RoleResponse>> {
            return localVarFp.getAllRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение списка мероприятий пользователя по роли
         * @param {number} id ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsByRole(id: number, options?: any): AxiosPromise<Array<EventResponse>> {
            return localVarFp.getEventsByRole(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение организационной роли по id
         * @param {number} roleId ID роли
         * @param {number} eventId ID меропрятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationalRoleById(roleId: number, eventId: number, options?: any): AxiosPromise<RoleResponse> {
            return localVarFp.getOrganizationalRoleById(roleId, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение списка организационных ролей
         * @param {number} eventId ID меропрятия
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationalRoles(eventId: number, options?: any): AxiosPromise<Array<RoleResponse>> {
            return localVarFp.getOrganizationalRoles(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение роли по id
         * @param {number} id ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleById(id: number, options?: any): AxiosPromise<RoleResponse> {
            return localVarFp.getRoleById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение списка системных ролей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles(options?: any): AxiosPromise<Array<RoleResponse>> {
            return localVarFp.getSystemRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Лишение пользователя роли Помощник
         * @param {number} userId 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAssistantRole(userId: number, eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.revokeAssistantRole(userId, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Лишение пользователя организационной роли
         * @param {number} userId ID пользователя
         * @param {number} eventId ID мероприятия
         * @param {number} roleId ID роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOrganizationalRole(userId: number, eventId: number, roleId: number, options?: any): AxiosPromise<void> {
            return localVarFp.revokeOrganizationalRole(userId, eventId, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Лишение пользователя роли Организатор
         * @param {number} userId 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeOrganizerRole(userId: number, eventId: number, options?: any): AxiosPromise<void> {
            return localVarFp.revokeOrganizerRole(userId, eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Лишение пользователя системной роли
         * @param {number} userId ID пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeSystemRole(userId: number, options?: any): AxiosPromise<void> {
            return localVarFp.revokeSystemRole(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Поиск ролей по совпадению в названии
         * @param {string} name Имя роли
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByName(name: string, options?: any): AxiosPromise<Array<RoleResponse>> {
            return localVarFp.searchByName(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleControllerApi - object-oriented interface
 * @export
 * @class RoleControllerApi
 * @extends {BaseAPI}
 */
export class RoleControllerApi extends BaseAPI {
    /**
     * 
     * @summary Назначение пользователю роли Помощник
     * @param {number} userId ID пользователя
     * @param {number} eventId ID мероприятия
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public assignAssistantRole(userId: number, eventId: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).assignAssistantRole(userId, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Назначение пользователю организационной роли
     * @param {number} userId ID пользователя
     * @param {number} eventId ID мероприятия
     * @param {number} roleId ID роли
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public assignOrganizationalRole(userId: number, eventId: number, roleId: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).assignOrganizationalRole(userId, eventId, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Назначение пользователю роли Организатор
     * @param {number} userId ID пользователя
     * @param {number} eventId ID мероприятия
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public assignOrganizerRole(userId: number, eventId: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).assignOrganizerRole(userId, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Назначение пользователю системной роли
     * @param {number} userId ID пользователя
     * @param {number} roleId ID роли
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public assignSystemRole(userId: number, roleId: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).assignSystemRole(userId, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создание роли
     * @param {RoleRequest} roleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public createRole(roleRequest: RoleRequest, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).createRole(roleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаление роли
     * @param {number} id ID роли
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public deleteRole(id: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).deleteRole(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Редактирование роли
     * @param {number} id ID роли
     * @param {RoleRequest} roleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public editRole(id: number, roleRequest: RoleRequest, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).editRole(id, roleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение списка привилегий
     * @param {GetAllPrivilegesTypeEnum} [type] Тип привилегии
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getAllPrivileges(type?: GetAllPrivilegesTypeEnum, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getAllPrivileges(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение списка всех ролей
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getAllRoles(options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getAllRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение списка мероприятий пользователя по роли
     * @param {number} id ID роли
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getEventsByRole(id: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getEventsByRole(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение организационной роли по id
     * @param {number} roleId ID роли
     * @param {number} eventId ID меропрятия
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getOrganizationalRoleById(roleId: number, eventId: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getOrganizationalRoleById(roleId, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение списка организационных ролей
     * @param {number} eventId ID меропрятия
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getOrganizationalRoles(eventId: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getOrganizationalRoles(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение роли по id
     * @param {number} id ID роли
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getRoleById(id: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getRoleById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение списка системных ролей
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public getSystemRoles(options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).getSystemRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Лишение пользователя роли Помощник
     * @param {number} userId 
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public revokeAssistantRole(userId: number, eventId: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).revokeAssistantRole(userId, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Лишение пользователя организационной роли
     * @param {number} userId ID пользователя
     * @param {number} eventId ID мероприятия
     * @param {number} roleId ID роли
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public revokeOrganizationalRole(userId: number, eventId: number, roleId: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).revokeOrganizationalRole(userId, eventId, roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Лишение пользователя роли Организатор
     * @param {number} userId 
     * @param {number} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public revokeOrganizerRole(userId: number, eventId: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).revokeOrganizerRole(userId, eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Лишение пользователя системной роли
     * @param {number} userId ID пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public revokeSystemRole(userId: number, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).revokeSystemRole(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Поиск ролей по совпадению в названии
     * @param {string} name Имя роли
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public searchByName(name: string, options?: AxiosRequestConfig) {
        return RoleControllerApiFp(this.configuration).searchByName(name, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAllPrivilegesTypeEnum = {
    System: 'SYSTEM',
    Event: 'EVENT'
} as const;
export type GetAllPrivilegesTypeEnum = typeof GetAllPrivilegesTypeEnum[keyof typeof GetAllPrivilegesTypeEnum];
